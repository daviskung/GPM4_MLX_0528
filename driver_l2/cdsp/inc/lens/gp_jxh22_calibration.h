#ifndef __GP_JXH42_CALIBRATION_H__
#define __GP_JXH42_CALIBRATION_H__

#include "..\gp_LensDef.h"


short g_ob[15] =
{
	0, // obautoen
	0, // ob_type
	0, //obHOffset
	0, // obVOffset

	1, // obmanuen
	16, // maunob

	0, // wboffseten
	0, // wbo_r
	0, // wbo_gr
	0, // wbo_gb
	0, // wbo_b

	1, // badpixen
	160, // bprthr
	160, // bpgthr
	160, // bpbthr
};

static const unsigned int g_gamma[] =
{
	/*	// AR0330
	0x199900, 0x15960b, 0x155615, 0x15561e, 0x155526, 0x11542e, 0x114534, 0x04543a,
	0x04513f, 0x111144, 0x144449, 0x11114d, 0x144452, 0x051156, 0x05145b, 0x011160,
	0x044464, 0x104468, 0x01116b, 0x10446f, 0x041172, 0x110476, 0x104479, 0x04417c,
	0x04417f, 0x044182, 0x104185, 0x104188, 0x01048b, 0x04108e, 0x010490, 0x101093,
	0x010495, 0x004197, 0x00409a, 0x10109c, 0x00409e, 0x0040a0, 0x0101a1, 0x1004a3,
	0x0040a5, 0x1001a6, 0x0100a8, 0x0010a9, 0x1001aa, 0x0400ac, 0x0100ad, 0x0040ae,
	0x0010af, 0x0010b0, 0x0010b1, 0x0040b2, 0x0040b3, 0x0100b4, 0x0400b5, 0x1000b6,
	0x0000b7, 0x0000b8, 0x0001b8, 0x0004b9, 0x0010ba, 0x0040bb, 0x0040bc, 0x0040bd,
	0x0040be, 0x0040bf, 0x0010c0, 0x0004c1, 0x1001c2, 0x0100c4, 0x0040c5, 0x0040c6,
	0x0040c7, 0x0040c8, 0x0040c9, 0x0100ca, 0x0100cb, 0x0100cc, 0x0400cd, 0x0400ce,
	0x0400cf, 0x0000d0, 0x0000d1, 0x0001d1, 0x0004d2, 0x0010d3, 0x0010d4, 0x0010d5,
	0x0010d6, 0x0010d7, 0x0010d8, 0x0004d9, 0x0004da, 0x0001db, 0x1000dd, 0x0400de,
	0x0100df, 0x0040e0, 0x0010e1, 0x0001e2, 0x1000e4, 0x0100e5, 0x0040e6, 0x0010e7,
	0x0004e8, 0x1000ea, 0x0400eb, 0x0040ec, 0x0010ed, 0x0004ee, 0x1001ef, 0x0400f1,
	0x0100f2, 0x0100f3, 0x0040f4, 0x0010f5, 0x0004f6, 0x0004f7, 0x0001f8, 0x0001f9,
	0x0001fa, 0x0001fb, 0x0004fc, 0x0010fd, 0x0040fe, 0x0000ff, 0x0000ff, 0x0000ff
	*/
	// H22
0x04510d, 0x051112, 0x111417, 0x14451b, 0x111120, 0x044425, 0x111129, 0x05112d,
0x044432, 0x044436, 0x04443a, 0x04443e, 0x044442, 0x110446, 0x111149, 0x04444d,
0x111051, 0x044154, 0x111058, 0x10445b, 0x04415e, 0x011062, 0x011065, 0x010468,
0x01046b, 0x01046e, 0x041071, 0x041074, 0x104176, 0x010479, 0x04107c, 0x00417e,
0x041081, 0x010183, 0x101086, 0x040488, 0x01018a, 0x10408d, 0x10108f, 0x041091,
0x040493, 0x040495, 0x040497, 0x040499, 0x10109b, 0x00109d, 0x00409f, 0x0101a0,
0x1004a2, 0x0010a4, 0x0100a6, 0x1004a7, 0x0040a9, 0x1001aa, 0x0040ac, 0x1001ad,
0x0100af, 0x0004b0, 0x0400b2, 0x0040b3, 0x0004b4, 0x0400b6, 0x0100b7, 0x0010b8,
0x0004b9, 0x1000bb, 0x0400bc, 0x0100bd, 0x0040be, 0x0010bf, 0x0004c0, 0x0004c1,
0x0001c2, 0x0001c3, 0x0000c5, 0x0000c6, 0x0000c7, 0x0000c8, 0x0000c9, 0x0000ca,
0x0000cb, 0x0000cc, 0x0000cd, 0x0000ce, 0x0000cf, 0x0000d0, 0x0001d0, 0x0001d1,
0x0001d2, 0x0001d3, 0x0001d4, 0x0001d5, 0x0001d6, 0x0001d7, 0x0001d8, 0x0001d9,
0x0000db, 0x0000dc, 0x1000dd, 0x0400de, 0x0400df, 0x0100e0, 0x0040e1, 0x0010e2,
0x0004e3, 0x1000e5, 0x0100e6, 0x0040e7, 0x0004e8, 0x1000ea, 0x0100eb, 0x0004ec,
0x0400ee, 0x0040ef, 0x1001f0, 0x0040f2, 0x1004f3, 0x0040f5, 0x0401f6, 0x0010f8,
0x0100fa, 0x0404fb, 0x1010fd, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff, 0x0000ff

	//u2.2016.01.05
/*	0x000000, 0x000000, 0x000000, 0x000000, 0x110000, 0x111102, 0x045106, 0x04440b,
	0x04440f, 0x044413, 0x044417, 0x04441b, 0x11041f, 0x111122, 0x044126, 0x10442a,
	0x01112d, 0x104431, 0x041134, 0x110438, 0x04443b, 0x04113e, 0x011042, 0x010445,
	0x110448, 0x11044b, 0x01044e, 0x010451, 0x011054, 0x041057, 0x104159, 0x01045c,
	0x04105f, 0x104161, 0x010464, 0x104067, 0x010469, 0x10416b, 0x04106e, 0x010170,
	0x104073, 0x041075, 0x040477, 0x010179, 0x01017b, 0x00407e, 0x004080, 0x004082,
	0x004084, 0x004086, 0x004088, 0x010189, 0x01018b, 0x04048d, 0x10108f, 0x004091,
	0x010093, 0x040194, 0x001096, 0x004098, 0x040199, 0x00109b, 0x01009d, 0x10049e,
	0x0100a0, 0x1004a1, 0x0040a3, 0x1004a4, 0x0100a6, 0x0004a7, 0x0100a9, 0x0010aa,
	0x0400ac, 0x0040ad, 0x1001ae, 0x0100b0, 0x0010b1, 0x0401b2, 0x0040b4, 0x0004b5,
	0x0400b7, 0x0040b8, 0x0004b9, 0x0400bb, 0x0040bc, 0x0004bd, 0x0400bf, 0x0040c0,
	0x0004c1, 0x1001c2, 0x0100c4, 0x0010c5, 0x1001c6, 0x0100c8, 0x0004c9, 0x0400cb,
	0x0040cc, 0x0004cd, 0x0400cf, 0x0010d0, 0x1001d1, 0x0040d3, 0x1004d4, 0x0100d6,
	0x0004d7, 0x0100d9, 0x0010da, 0x0100dc, 0x0004dd, 0x0100df, 0x1004e0, 0x0040e2,
	0x0401e3, 0x0010e5, 0x0040e7, 0x0401e8, 0x1004ea, 0x0040ec, 0x0100ee, 0x0401ef,
	0x0404f1, 0x1010f3, 0x1010f5, 0x0040f7, 0x0040f9, 0x0040fb, 0x0040fd, 0x0000ff,*/

};


static const unsigned short g_wb_gain[61][2] =
{	/*2000K~8000K*/
						// by Comi
{24,	141 }, // 2   //{31,	178},
{28,	140 },        //{38,	176},
{32,	139 },        //{45,	174},
{36,	138 },        //{51,	172},
{39,	137 },        //{56,	170},
{42,	136 },        //{62,	168},
{45,	135 },        //{67,	166},
{48,	134 },        //{71,	164},
{51,	133 },        //{75,	162},
{54,	132 }, // 3   //{79,	160},
{56,	131 },        //{82,	158},
{59,	130 },        //{86,	156},
{61,	129 },        //{89,	154},
{63,	127 },        //{91,	152},
{65,	126 },        //{94,	151},
{67,	125 }, // 3.6 //{96,	149},
{69,	124 },        //{98,	147},
{70,	123 },        //{100,	145},
{72,	122 },        //{102,	143},
{73,	120 }, // 4   //{103,	141},
{74,	119 },        //{105,	139},
{76,	118 },        //{106,	138},
{77,	117 },        //{107,	136},
{78,	115 },        //{109,	134},
{79,	114 },        //{110,	132},
{80,	113 },        //{111,	131},
{80,	111 },        //{112,	129},
{81,	110 },        //{113,	127},
{82,	109 },        //{114,	125},
{82,	107 }, // 5   //{115,	124},
{83,	106 },        //{116,	122},
{83,	105 },        //{116,	120},
{84,	103 },        //{117,	119},
{84,	102 },        //{118,	117},
{84,	100 },// 5.5  //{119,	116},
{84,	99  },        //{120,	114},
{85,	98  },        //{121,	112},
{85,	96  },        //{122,	111},
{85,	95  },        //{123,	109},
{85,	93  }, // 6   //{124,	108},
{85,	92  },        //{125,	106},
{85,	90  },        //{126,	105},
{85,	88  },        //{127,	103},
{85,	87  },        //{128,	102},
{85,	85  },  // 6.5//{129,	100},
{85,	84  },        //{130,	99 },
{85,	82  },        //{131,	97 },
{85,	81  },        //{132,	96 },
{85,	79  },        //{133,	94 },
{85,	77  }, // 7   //{133,	93 },
{85,	76  },        //{134,	92 },
{85,	74  },        //{135,	90 },
{86,	72  },        //{136,	89 },
{86,	71  },        //{136,	87 },
{86,	69  },        //{137,	86 },
{86,	67  },        //{137,	85 },
{86,	65  },        //{138,	83 },
{87,	64  },        //{138,	82 },
{87,	62  },        //{138,	81 },
{87,	60  },  // 8  //{138,	80 },
{89,	55  },		  //{137,	78 }
};

static const short g_awb_thr[31] =
{
	200, // awbwinthr

	0*64, // sindata
	1*64, // cosdata

	 30, // Ythr0
	 90, // Ythr1
	140, // Ythr2
	200, // Ythr3

	// wb thr
	-6, //UL1N1
	 5, //UL1P1
	-6, //VL1N1
	 5, //VL1P1

	 -6, //UL1N2
	  6, //UL1P2
	 -6, //VL1N2
	  6, //VL1P2

	 -7, //UL1N3
	  7, //UL1P3
	 -7, //VL1N3
	  7, //VL1P3
	// without wb thr
	-27, // UL1N1
	-7, // UL1P1
	-24, // VL1N1
	 2, // VL1P1

	-47, //UL1N2
	-7, //UL1P2
	-44, //VL1N2
	 2, // VL1P2

	-70, // UL1N3
	-7, //UL1P3
	-59, // VL1N3
	 2, //VL1P3
};


static const short g_color_matrix[9] =
{
	/*	//comi
	(short) ((1.50648861385094610000 *64) + 0.5),
	(short) ((-0.61933106247869152000 *64) + 0.5),
	(short) ((0.11284244862774534000 *64) + 0.5),
	(short) ((-0.15933838732402536000 *64) + 0.5),
	(short) ((1.39186869115112090000 *64) + 0.5),
	(short) ((-0.23253030382709550000  *64) + 0.5),
	(short) ((0.02618876598136074900  *64) + 0.5),
	(short) ((-0.93949142923292706000 *64) + 0.5),
	(short) ((1.91330266325156640000 *64) + 0.5)
	*/
	// comi
	(short) (1.289461127029244000*64),
	(short) (-0.15633132671308050*64),
	(short) (-0.13312980031616348*64),
	(short) (-0.28924304019577968*64),
	(short) (1.448004578314210100*64),
	(short) (-0.15876153811843055*64),
	(short) (-0.02364080679490283*64),
	(short) (-1.03955844263753080*64),
	(short) (2.063199249432433800*64)
};


const INT8U LiTable_rgb[48]=
{	//R*16,Gb/Gr*16,B*16
	0x1e,
	0x2e,
	0x3e,
	0x4e,
	0x5e,
	0x6e,
	0x7e,
	0x8e,
	0x9e,
	0xae,
	0xbe,
	0xce,
	0xde,
	0xee,
	0xfe,
	0xff,
	0x0f,
	0x1f,
	0x2f,
	0x3f,
	0x4f,
	0x5f,
	0x6f,
	0x7f,
	0x8f,
	0x9f,
	0xaf,
	0xbf,
	0xcf,
	0xdf,
	0xef,
	0xff,
	0x07,
	0x17,
	0x27,
	0x37,
	0x47,
	0x57,
	0x67,
	0x77,
	0x87,
	0x97,
	0xa7,
	0xb7,
	0xc7,
	0xd7,
	0xe7,
	0xf7
};

const INT16U MaxTan8[32]=
{
	0x0C0,
	0x155,
	0x154,
	0x0C1,
	0x0BF,
	0x156,
	0x153,
	0x0C2,
	0x0BF,
	0x154,
	0x153,
	0x0C0,
	0x0BE,
	0x155,
	0x152,
	0x0C1,
	0x0BE,
	0x153,
	0x152,
	0x0BF,
	0x0BD,
	0x154,
	0x151,
	0x0C0,
	0x0BD,
	0x152,
	0x151,
	0x0BE,
	0x0BC,
	0x153,
	0x150,
	0x0BF
};

INT16U Slope4[16]=
{
	0x155,
	0x154,
	0x153,
	0x152,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x154,
	0x153,
	0x152,
	0x151,
	0x152,
	0x153,
	0x154
};

const INT16U CLPoint[8]=		//Sensor Center is Weight/2, Hight/2 for RGB
{
	#if 0	//for VGA
		//R Center
		0x140,//X=320
		0x0F0,//Y=
		//Gr Center
		0x13F,//
		0x0F0,//
		0x140,
		0x0EF,
		0x13F,
		0x0EF
	#else	//For XQGA
		0x400,
		0x300,
		0x400,
		0x300,
		0x400,
		0x300,
		0x400,
		0x300
	#endif
};

const INT16U Radius_File_0[512]=
{
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12a,
	0x12b
};

const INT16U Radius_File_1[512]=
{
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12a,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12a,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12a,
	0x12b,
	0x12c
};



const gpCisCali_t g_cali = {
	.ob = (short *)g_ob,
	.linearity = 0,
	.radius0 = (INT16U *) Radius_File_0,
	.radius1 = (INT16U *) Radius_File_1,
	.clpoint = (INT16U *) CLPoint,
	.maxtan = (INT16U *) MaxTan8,
	.slope = (INT16U *) Slope4,
	.segR = 20,                         /*0x194[4:0]*/
	.gamma = (unsigned int *)g_gamma,
	.awb_thr = (signed short *)g_awb_thr,
	.wb_gain = (unsigned short (*)[2])g_wb_gain,
	.color_matrix = (short *)g_color_matrix
};



#endif
