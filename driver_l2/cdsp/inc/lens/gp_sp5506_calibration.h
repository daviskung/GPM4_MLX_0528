#ifndef __GP_SP5506_CALIBRATION_H__
#define __GP_SP5506_CALIBRATION_H__

#include "..\gp_LensDef.h"


static const short g_ob[15] =
{
	0, // obautoen
	0, // ob_type
	0, //obHOffset
	0, // obVOffset

	1, // obmanuen
	64,//42, // maunob

	1, // wboffseten
	0, // wbo_r
	0, // wbo_gr
	0, // wbo_gb
	0, // wbo_b

	1, // badpixen
	120, // bprthr
	120, // bpgthr
	120, // bpbthr
};

static const unsigned int g_gamma[] =
{
	0x000000, 0x000000, 0x000000, 0x110000, 0x111102, 0x044506, 0x04440b, 0x04440f,
    0x111013, 0x111116, 0x04111a, 0x04441e, 0x111121, 0x044425, 0x011029, 0x10442c,
    0x04112f, 0x011033, 0x110436, 0x110439, 0x10443c, 0x10443f, 0x110442, 0x010445,
    0x041048, 0x04104b, 0x10414d, 0x010450, 0x104053, 0x010455, 0x101058, 0x01045a,
    0x10415c, 0x04105f, 0x010461, 0x004163, 0x104066, 0x101068, 0x04106a, 0x04046c,
    0x04046e, 0x040470, 0x040472, 0x101074, 0x101076, 0x004078, 0x01007a, 0x04017b,
    0x10047d, 0x00107f, 0x010081, 0x040482, 0x001084, 0x010086, 0x100487, 0x010089,
    0x10048a, 0x00408c, 0x10048d, 0x00408f, 0x100490, 0x010092, 0x000493, 0x040095,
    0x001096, 0x100197, 0x010099, 0x00049a, 0x04009c, 0x00409d, 0x00049e, 0x0400a0,
    0x0040a1, 0x0004a2, 0x0400a4, 0x0040a5, 0x0004a6, 0x0100a8, 0x0010a9, 0x1001aa,
    0x0100ac, 0x0010ad, 0x1001ae, 0x0100b0, 0x0004b1, 0x0400b3, 0x0010b4, 0x1001b5,
    0x0040b7, 0x1004b8, 0x0100ba, 0x1004bb, 0x0100bd, 0x1004be, 0x0040c0, 0x0401c1,
    0x0010c3, 0x0100c5, 0x1004c6, 0x0040c8, 0x0100ca, 0x0404cb, 0x1010cd, 0x0040cf,
    0x0040d1, 0x0101d2, 0x0101d4, 0x0401d6, 0x0404d8, 0x0404da, 0x0101dc, 0x0101de,
    0x0041e0, 0x1040e3, 0x1010e5, 0x0404e7, 0x0101e9, 0x1010ec, 0x0104ee, 0x1041f0,
    0x0104f3, 0x1040f6, 0x0104f8, 0x0410fb, 0x0041fd, 0x0000ff, 0x0000ff, 0x0000ff
};

static const unsigned short g_wb_gain[71][2] =
{	/*2000K~8000K*/
    { 36, 148 },
    { 40, 145 },
    { 43, 143 },
    { 46, 140 },
    { 49, 138 },
    { 52, 136 },
    { 55, 133 },
    { 58, 131 },
    { 60, 129 },
    { 63, 127 },
    { 65, 125 },
    { 68, 123 },
    { 70, 121 },
    { 72, 119 },
    { 74, 118 },
    { 76, 116 },
    { 78, 114 },
    { 80, 113 },
    { 82, 111 },
    { 84, 110 },
    { 85, 108 },
    { 87, 107 },
    { 89, 105 },
    { 90, 104 },
    { 91, 103 },
    { 93, 101 },
    { 94, 100 },
    { 95, 99  },
    { 96, 98  },
    { 97, 97  },
    { 98, 96  },
    { 99, 95  },
    { 100, 94 },
    { 101, 93 },
    { 102, 92 },
    { 103, 91 },
    { 104, 90 },
    { 104, 90 },
    { 105, 89 },
    { 106, 88 },
    { 106, 87 },
    { 107, 87 },
    { 107, 86 },
    { 108, 85 },
    { 108, 85 },
    { 109, 84 },
    { 109, 84 },
    { 110, 83 },
    { 110, 83 },
    { 110, 82 },
    { 111, 82 },
    { 111, 81 },
    { 111, 81 },
    { 112, 80 },
    { 112, 80 },
    { 112, 79 },
    { 113, 79 },
    { 113, 78 },
    { 113, 78 },
    { 114, 77 },
    { 114, 77 },
    { 114, 77 },
    { 115, 76 },
    { 115, 76 },
    { 115, 75 },
    { 116, 75 },
    { 116, 74 },
    { 117, 74 },
    { 117, 74 },
    { 118, 73 },
    { 118, 73 }
};

static const short g_awb_thr[31] =
{
	200, // awbwinthr

	0*64, // sindata
	1*64, // cosdata

	 30, // Ythr0
	 90, // Ythr1
	140,	// Ythr2
	200, // Ythr3

	// wb thr
	-3, // UL1N1
	 3, // UL1P1
	-3, // VL1N1
	 3, // VL1P1

	 -4, //UL1N2
	  4, //UL1P2
	 -4, //VL1N2
	  4, // VL1P2

	 -5, // UL1N3
	  5,	 //UL1P3
	 -5, // VL1N3
	  5, //VL1P3

	// without wb thr
	-27, // UL1N1
	-7, // UL1P1
	-24, // VL1N1
	 2, // VL1P1

	-47, //UL1N2
	-7, //UL1P2
	-44, //VL1N2
	 2, // VL1P2

	-70, // UL1N3
	-7, //UL1P3
	-59, // VL1N3
	 2, //VL1P3
};


static const short g_color_matrix[9] =
{
//	(short) ((1.47621034337316100000 *64) + 0.5),
//	(short) ((-0.50284584256374931000 *64) + 0.5),
//	(short) ((0.02663549919058819800 *64) + 0.5),
//	(short) ((-0.15069646335721187000 *64) + 0.5),
//	(short) ((1.36981925910187160000 *64) + 0.5),
//	(short) ((-0.21912279574465979000  *64) + 0.5),
//	(short) ((-0.02361537630939113100  *64) + 0.5),
//	(short) ((-0.92897062676674558000 *64) + 0.5),
//	(short) ((1.95258600307613680000 *64) + 0.5)

    (short) ((1.46771035574282300000  * 64) + 0.5),
    (short) ((-0.43592776146317230000 * 64) + 0.5),
    (short) ((-0.03178259427965064700 * 64) + 0.5),
    (short) ((-0.25102374854198972000 * 64) + 0.5),
    (short) ((1.52664323305444390000  * 64) + 0.5),
    (short) ((-0.27561948451245433000 * 64) + 0.5),
    (short) ((0.00949712228870746090  * 64) + 0.5),
    (short) ((-1.26213820036009290000 * 64) + 0.5),
    (short) ((2.25264107807138550000  * 64) + 0.5)
};


const INT8U LiTable_rgb[48]=
{	//R*16,Gb/Gr*16,B*16
	0x1e,
	0x2e,
	0x3e,
	0x4e,
	0x5e,
	0x6e,
	0x7e,
	0x8e,
	0x9e,
	0xae,
	0xbe,
	0xce,
	0xde,
	0xee,
	0xfe,
	0xff,
	0x0f,
	0x1f,
	0x2f,
	0x3f,
	0x4f,
	0x5f,
	0x6f,
	0x7f,
	0x8f,
	0x9f,
	0xaf,
	0xbf,
	0xcf,
	0xdf,
	0xef,
	0xff,
	0x07,
	0x17,
	0x27,
	0x37,
	0x47,
	0x57,
	0x67,
	0x77,
	0x87,
	0x97,
	0xa7,
	0xb7,
	0xc7,
	0xd7,
	0xe7,
	0xf7
};

const INT16U MaxTan8[32]=
{
	0x0C0,
	0x155,
	0x154,
	0x0C1,
	0x0BF,
	0x156,
	0x153,
	0x0C2,
	0x0BF,
	0x154,
	0x153,
	0x0C0,
	0x0BE,
	0x155,
	0x152,
	0x0C1,
	0x0BE,
	0x153,
	0x152,
	0x0BF,
	0x0BD,
	0x154,
	0x151,
	0x0C0,
	0x0BD,
	0x152,
	0x151,
	0x0BE,
	0x0BC,
	0x153,
	0x150,
	0x0BF
};

const INT16U Slope4[16]=
{
	0x155,
	0x154,
	0x153,
	0x152,
	0x151,
	0x152,
	0x153,
	0x154,
	0x155,
	0x154,
	0x153,
	0x152,
	0x151,
	0x152,
	0x153,
	0x154
};

const INT16U CLPoint[8]=		//Sensor Center is Weight/2, Hight/2 for RGB
{
	#if 0	//for VGA
		//R Center
		0x140,//X=320
		0x0F0,//Y=
		//Gr Center
		0x13F,//
		0x0F0,//
		0x140,
		0x0EF,
		0x13F,
		0x0EF
	#else	//For XQGA
		0x400,
		0x300,
		0x400,
		0x300,
		0x400,
		0x300,
		0x400,
		0x300
	#endif
};

const INT16U Radius_File_0[512]=
{
	0x100,
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12a,
	0x12b
};

const INT16U Radius_File_1[512]=
{
	0x101,
	0x102,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x103,
	0x104,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x105,
	0x106,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12a,
	0x107,
	0x108,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x109,
	0x10a,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x10b,
	0x10c,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x10d,
	0x10e,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x10f,
	0x110,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x111,
	0x112,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x113,
	0x114,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x115,
	0x116,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x117,
	0x118,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x119,
	0x11a,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x11b,
	0x11c,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x11d,
	0x11e,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x11f,
	0x120,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x121,
	0x122,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x123,
	0x124,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12a,
	0x125,
	0x126,
	0x127,
	0x128,
	0x129,
	0x12a,
	0x12b,
	0x12c
};

const gpCisCali_t g_cali = {
	.ob = (short *)g_ob,
	.linearity = 0,
	.radius0 = (INT16U *) Radius_File_0,
	.radius1 = (INT16U *) Radius_File_1,
	.clpoint = (INT16U *) CLPoint,
	.maxtan = (INT16U *) MaxTan8,
	.slope = (INT16U *) Slope4,
	.segR = 20,                         /*0x194[4:0]*/
	.gamma = (unsigned int *)g_gamma,
	.awb_thr = (signed short *)g_awb_thr,
	.wb_gain = (unsigned short (*)[2])g_wb_gain,
	.color_matrix = (short *)g_color_matrix
};

#endif //#define __GP_SP5506_CALIBRATION_H__
